//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.Specialized;

namespace CodeBaseBlog.DomainModel
{
    public partial class Post
    {
        #region Primitive Properties

        public virtual int Id { get; private set; }

        public virtual DateTime CreationDate { get; private set; }

        public virtual DateTime LastModifiedDate { get; private set; }

        public virtual DateTime? PublishDate { get; private set; }

        public virtual string Subject { get; private set; }

        public virtual string Body { get; private set; }

        public virtual bool CommentsEnabled { get; private set; }

        #endregion

        #region Navigation Properties

        private ICollection<Category> _categories;

        private ICollection<Comment> _comments;

        public virtual ICollection<Category> Categories
        {
            get
            {
                if (_categories == null)
                {
                    _categories = new FixupCollection<Category>();
                }
                return _categories;
            }
            set { _categories = value; }
        }

        public virtual ICollection<Comment> Comments
        {
            get
            {
                if (_comments == null)
                {
                    var newCollection = new FixupCollection<Comment>();
                    newCollection.CollectionChanged += FixupComments;
                    _comments = newCollection;
                }
                return _comments;
            }
            set
            {
                if (!ReferenceEquals(_comments, value))
                {
                    var previousValue = _comments as FixupCollection<Comment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupComments;
                    }
                    _comments = value;
                    var newValue = value as FixupCollection<Comment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupComments;
                    }
                }
            }
        }

        #endregion

        #region Association Fixup

        private void FixupComments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Comment item in e.NewItems)
                {
                    item.Post = this;
                }
            }

            if (e.OldItems != null)
            {
                foreach (Comment item in e.OldItems)
                {
                    if (ReferenceEquals(item.Post, this))
                    {
                        item.Post = null;
                    }
                }
            }
        }

        #endregion
    }
}